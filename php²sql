<?php

/**
 * x²sql
 *
 * An open source SQL-generator-class.
 * Inspired by the database-driver in Code-igniter http://ellislab.com/codeigniter.
 *   if (get_magic_quotes_gpc()) {        $value = stripslashes($value);    }
 * @package		x²sql
 * @author		mborchert
 * @copyright           Copyright (c) 2013.
 * @license		http://creativecommons.org/licenses/by/3.0/deed.de
 * @link		http://get-resource.net/app/php/x²sql
 * @since		Version 1.0
 * @todo: join
 * @todo: support special settings : distinct, etc.
 * @todo: config_setting_options for complode : delimiter,no_brackets,no_alias,cast,escape,allow,array_position
 */
// ------------------------------------------------------------------------

/**
 * x²sql a Structured Query Language (SQL) Command Creator
 * 
 * This class enables you to create a SQL-Command from multiple input types.
 * as there are, PHP-Codeand Selrialized, json and xml.
 *
 */
class x²sql {
	/**
	 * Indicate a string in the ConfigurationSet to be replaced.
	 * Default replacement off requested tokens is stringEscaped.
	 */

	const tokenizer = ":";
	/**
	 * The Standard Placeholder in Queries
	 */
	const placerholder = "?";
	/**
	 *
	 */
	const esc_string = "'";
	/**
	 *
	 */
	const esc_key = "`";
	/**
	 *
	 */
	const esc_non = "";
	/**
	 *
	 */
	const esc_num = "";
	/**
	 *
	 */
	const null_string = "null";
	/**
	 * Operators Regular Expression, to savely not! string-escape these
	 */
	const regex_operators = "/^(:=|\|\||OR|XOR|&&|AND|NOT|BETWEEN|CASE|WHEN|THEN|ELSE|=|<=>|>=|<=|<|<>|>|!=|IS|LIKE|REGEXP|IN|\||&|<<|>>|-|\+|\*|\/|DIV|%|MOD|^|~|!|BINARY|COLLATE)$/i";
	/**
	 * 
	 */
	const x²null = "x²null";
	/**
	 * 
	 */
	const x²bool = "x²bool";
	/**
	 * 
	 */
	const x²number = "x²number";
	/**
	 * 
	 */
	const x²string = "x²string";
	/**
	 * 
	 */
	const x²func = "x²func";
	/**
	 * 
	 */
	const x²token = "x²token";
	/**
	 * 
	 */
	const x²place = "x²place";
	/**
	 * 
	 */
	const x²key = "x²key";
	/**
	 * 
	 */
	const x²order = "x²order";
	/**
	 * 
	 */
	const x²operator = "x²operator";
	/**
	 * 
	 */
	const x²math = "x²math";
	/**
	 * 
	 */
	const char_list_delimiter = ",";
	/**
	 * 
	 */
	const char_bracket_open = "(";
	/**
	 * 
	 */
	const char_bracket_close = ")";

	/**
	 * Give the Query a name
	 * 
	 * @var str  name
	 */
	public $name;
	
	/**
	 * Introduced for set() a statement and a update-part
	 * 
	 * @var str  name
	 */
	private $flag;

	/**
	 * Obligated in use of Subqueries
	 * 
	 * @var str  alias
	 */
	public $alias;

	/**
	 * Adding information to the Query
	 *
	 * @var str comment
	 */
	public $comment;

	/**
	 * The textoutput of the Query
	 * 
	 * @var str  command
	 */
	public $command;

	/**
	 * Supported are : select, update, delete , insert.
	 *
	 * @var str command_type 
	 */
	public $command_type;

	/**
	 * Indicating that the prepare routines have to take action.
	 *
	 * @var bool Flag
	 */
	public $prepare = false;

	/**
	 * holding both: the placeholders and the tokenizers.
	 *
	 * @var stdclass
	 */
	public $bind;

	/**
	 * like argv and argc, the count of prepare actions.
	 *
	 * @var int
	 */
	public $bind_count = 0;

	/**
	 * the PDO Queryobject fetch-Functionname.
	 * Can easily be wrapped to non PDO connection.
	 * 
	 * @var str function name
	 */
	public $fetch = "fetchAll";

	/**
	 * the PDO const FETCH_*  type.
	 * NUM, ASSOC, OBJECT, BOTH (NUM,ASSOC)
	 * @var int 
	 */
	public $fetch_type = PDO::FETCH_NUM;

	/**
	 * the initial Feed for the Constructor
	 *
	 * @var stdClass
	 */
	public $init_data;

	/**
	 * the last chunk appended to command 
	 *
	 * @var string
	 */
	public $last_append;
	/**
	 * handle exceptions in complode by asking for caller function
	 *
	 * @var string
	 */
	public $current_call;
	/**
	 * Automatic String Conversion
	 */
	public function __toString() {
		return (is_array($this->command))
		? implode("\n",$this->command) : $this->command;
	}
	/**
	 * reset the object for reuse
	 */
	public function reset() {
		$this->bind = new stdClass();
		$this->bind_count = 0;
		$this->prepare = false;
		$this->init_data = null;
		$this->command = "";
		$this->command_type = null;
		$this->last_append = "";
		$this->fetch = "fetchAll";
		$this->fetch_type = PDO::FETCH_NUM;
		$this->comment = "";
		$this->alias = "";
		$this->name = "";
	}

	public function get_cfg_data(&$cfg) {
		if (is_string($cfg) && preg_match("/^[\{\(]{1,999}/", $cfg)) {
			$jcfg = json_decode($cfg);
			if (!is_array($jcfg) && !is_object($jcfg)) {
				throw new Exception("invalid Json");
			}
			return $jcfg;
		}
		return $cfg;
	}

	/**
	 * This function gives us the convenience, to throw in a Configuration Object and getting Out the SqlStatement.
	 *
	 * @param $cfg
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function Sql(&$cfg) {
		$this->init_data = $cfg;
		$cfg = $this->get_cfg_data($cfg);
		if (isset($cfg->command)){
						$_ = explode(" ",trim($cfg->command));
						$this->command_type = array_shift($_);
						$this->command=$cfg->command;
			return $this;}
		if (isset($cfg->select))
			return $this->name(@$cfg->name)
						->comment(@$cfg->comment)
						->select($cfg->select)
						->from(@$cfg->from)
						->union(@$cfg->union)
						->where(@$cfg->where)
						->having(@$cfg->having)
						->group(@$cfg->group)
						->order(@$cfg->order)
						->limit(@$cfg->limit)
						->offset(@$cfg->offset)
						->fetch(@$cfg->fetch)
						->fetch_type(@$cfg->fetch_type)
						->alias(@$cfg->alias);
		if (isset($cfg->insert))
			return $this->name(@$cfg->name)
						->comment(@$cfg->comment)
						->insert($cfg->insert)
						->columns($cfg->columns)
						->values($cfg->values);
		if (isset($cfg->update))
			return $this->name(@$cfg->name)
						->comment(@$cfg->comment)
						->update($cfg->update)
						->set($cfg->set)
						->where($cfg->where);
		if (isset($cfg->delete))
			return $this->name(@$cfg->name)
						->comment(@$cfg->comment)
						->delete($cfg->delete)
						->where($cfg->where);
		if (isset($cfg->transaction))
			return $this->name(@$cfg->name)
						->comment(@$cfg->comment)
						->transaction($cfg->transaction);
		if (isset($cfg->set))
			return $this->name(@$cfg->name)
						->comment(@$cfg->comment)
						->flag("command")
						->set($cfg->set)
						->unflag();
	}

	/**
	 *
	 * @param $cfg
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function __construct($cfg = null) {
		$this->bind = new stdClass;

		if ($cfg) {
			return $this->Sql($cfg);
		}
	}
	public function flag($hint){
		$this->flag = $hint;
		return $this;
	}
	public function unflag(){
		$this->flag = null;
		return $this;
	}
	/**
	 * Static access to a new x²sql instance.
	 * Helpful for PHP-Version prior to 5.4.
	 * <code>
	 * x²sql::query()->select()->from(
	 *      "table1",
	 *      x²sql::query()->select()->from("table2")->alias("$table2")
	 *      );
	 * </code>
	 * @param $cfg
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	static function query($cfg = null) {
		return new x²sql($cfg);
	}

	public function complode($set, $cfg = null) {
		if (!$cfg)
			$cfg = new stdClass;
		if ($set === null) {
			return $this->complode(new x²null(), $cfg);
		}
		if (is_array($set)) {
			$delimiter = @$cfg->delimiter ? $cfg->delimiter : x²sql::char_list_delimiter;
			foreach ($set as $key => $subset) {
				$cfg->array_position = $key;
				$_[] = $this->complode($subset, $cfg);
			}
			return ((@$cfg->no_brackets) ? "" : x²sql::char_bracket_open)
					. implode($delimiter, $_)
					. ((@$cfg->no_brackets) ? "" : x²sql::char_bracket_close);
		} elseif (is_object($set)) {
			$class = get_class($set);
			if (isset($cfg->allow) && !in_array($class, $cfg->allow) && !method_exists($class, "__toString")) {
				if ($class != "stdClass")
					throw new Exception("$class is not allowed");
			}
			switch ($class) {
				case self::x²place :
					$this->prepare = true;
					$counter = $this->bind_count++;
					$this->bind->$counter = new stdClass();
					$this->bind->$counter->bind = "Param";
					$this->bind->$counter->key = self::placerholder;
					$this->bind->$counter->type = PDO::PARAM_STR;
					$this->bind->$counter->value = self::null_string;
					if (@$cfg->no_alias) {
						return x²sql::escape($set->value, "");
					}
					else
						return $set->display;
					break;
				case self::x²token :
					if (2 > strlen($set->value))
						throw new Exception(__CLASS__ . "->complode emptyToken not allowed");
					if (preg_match("/\s/", $set->value))
						throw new Exception(__CLASS__ . "->escape prepare-token must not have space");
					$this->prepare = true;
					$counter = $this->bind_count++;
					$this->bind->$counter = new stdClass();
					$this->bind->$counter->bind = "Param";
					$this->bind->$counter->key = $set->value;
					$this->bind->$counter->type = PDO::PARAM_STR;
					$this->bind->$counter->value = self::null_string;
					if (@$cfg->no_alias) {
						return x²sql::escape(x²sql::tokenizer . $set->value, "");
					}
					else
						return $set->display;
					break;
				case self::x²null:
				case self::x²bool :
				case self::x²number :
				case self::x²string :
				case self::x²key :
					if ($class === self::x²string && !strlen($set->value)
					) {
						return self::esc_string.self::esc_string;
					}
					if (@$cfg->escape) {
						return x²sql::escape($set->value, $cfg->escape)
								. (@$cfg->no_alias ? "" : " " . x²sql::escape($set->alias, self::esc_key) );
					} elseif (@$cfg->no_alias) {
						return (new $class($set->value))->display;
					} else {
						return $set->display;
					}
					break;
				case self::x²order:case self::x²operator:case self::x²math:
					return $set->display;
					break;
				case self::x²func:
					$str = array();
					foreach ($set->argus as $arg) {
						$str[] = $this->complode($arg);
					}
					return $set->name
							. self::char_bracket_open
							. implode(self::char_list_delimiter, $str)
							. self::char_bracket_close
							. (@$cfg->no_alias ? "" : " " . x²sql::escape($set->alias, self::esc_key) );
					break;
				case __CLASS__:
					if ($set->prepare) {
						$this->prepare = true;
						foreach ($set->bind as $key => $bind) {
							$this->bind_count+=1;
							$this->bind->{$this->bind_count + $set->bind_count} = $bind;
						}
					}
					return self::char_bracket_open
							. $set->command
							. self::char_bracket_close
							. (@$cfg->no_alias ? "" : " " . self::escape($set->alias, self::esc_key));
				default:
					if (!isset($set->type))
						throw new Exception("$class::property:type does not exist");
					//$this->stdClass2x²class
					switch (@$set->type) {
						case self::x²null:
						case self::x²bool :
						case self::x²number :
						case self::x²place :
						case self::x²token :
						case self::x²string :
						case self::x²key :
							$class = $set->type;
							return $this->complode(new $class($set->value, @$set->alias), $cfg);
							break;
						case self::x²func :
							return $this->complode(new x²func($set->name, @$set->argus, @$set->alias), $cfg);
							break;
						case __CLASS__:
							return $this->complode(new x²sql($set), $cfg);
							break;
						case self::x²order:
							return $this->complode(new x²order($set->name, @$set->direction), $cfg);
							break;
						case self::x²operator:
							return $this->complode(new x²operator($set->value), $cfg);
							break;
						case self::x²math:
							return $this->complode(new x²math($set->value), $cfg);
							break;
						default:
							$class = get_class($set);
							if(!method_exists($class, "__toString"))
								throw new Exception(__CLASS__ . "->implode unkown type");
							else{						
								return $this->complode($set->__toString(), $cfg);
							}
							break;
					}
					///$this->stdClass2x²class
					break;
			}
		} elseif (is_bool($set)) {
			$set = $set ? "1" : "0";
			$class = @$cfg->cast ? $cfg->cast : "x²bool";
			return $this->complode(new $class($set), $cfg);
		} elseif (is_numeric($set)) {
			$class = @$cfg->cast ? $cfg->cast : "x²number";
			return $this->complode(new $class($set), $cfg);
		} elseif (is_string($set)) {
			
			if($this->current_call=="where" || $this->current_call=="having")
				if (preg_match(self::regex_operators, $set) 
					&& (@$cfg->array_position&1))
					return $set;
			if ($set == self::placerholder) {
				return $this->complode(new x²place($set), $cfg);
			} elseif (substr($set, 0, 1) == self::tokenizer) {
				return $this->complode(new x²token(substr($set, 1)), $cfg);
			} else {
				$class = @$cfg->cast ? $cfg->cast : "x²string";
				return $this->complode(new $class($set), $cfg);
			}
		} throw new Exception("you should never reach this point");
	}

	/**
	 *
	 * @param $str
	 * @param $esc
	 * @param $pos optional, default -1 (used in where [o1,op,o2] [x,=,y]
	 * pos 1 will not be escaped if operand is valid
	 *
	 * @return str
	 *
	 * @access public
	 */
	static public function escape($str, $esc = "", $operator = 0) {
		if(is_string($str) && strlen($str)==0)return "";
		if ($str === self::null_string || $str === null) {
			return self::null_string;
		} elseif (is_bool($str))
			return $str ? $esc . "1" . $esc : $esc . "0" . $esc;
		elseif ($str === self::placerholder)
			return $str;
		elseif (is_numeric($str))
			return $esc . $str . $esc;
		elseif (preg_match(self::regex_operators, $str) && $operator)
			return trim($str);
		elseif (substr($str, 0, 1) != self::tokenizer) {

			$ndl = array("/\\r/", "/\\n/", "/\\t/");
			$rep = array("\\r", "\\n", "\\t");

			if (trim($esc)) {
				$ndl[] = "/" . $esc . "/";
				$rep[] = $esc === self::esc_key ?  $esc.$esc : "\\".$esc;
			}
			return $esc . preg_replace($ndl, $rep, $str) . $esc;
		} else {
			if (preg_match("/\s/", trim($str)))
				throw new Exception("tokenizer must have no space");
		}

		return $str;
	}

	/**
	 * 
	 * The columns to select.
	 * By default every inputfield from array gets keyword-escaped.
	 * Use the x²-HelperClasses to get different output.
	 * <code>
	 * x²sql::query()
	 *   ->select(new x²func("count","*","mycount"))
	 *   ->from("table")
	 *   ->group("mygroup");
	 * </code>
	 * @param $set mixed
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function select($set = "*") {
		$this->current_call = __FUNCTION__;
		if (!$this->command_type)
			$this->command_type = __FUNCTION__;
		if ($set === "" || $set === null || $set === "*"){
			$this->command.= $this->last_append = __FUNCTION__ . " *";
		} else {
			$cfg = new stdClass;
			$cfg->no_brackets = true;
			$cfg->cast = "x²key";
			$this->command.= $this->last_append = __FUNCTION__ . " " . $this->complode($set, $cfg);
		}
		return $this;
	}

	//tablelist-group

	/**
	 * 
	 * for details see method 'from'.
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function insert($set) {
		$this->current_call = __FUNCTION__;
		$this->command_type = __FUNCTION__;
		$cfg = new stdClass;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$this->command.= $this->last_append = __FUNCTION__ . " into " . $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * Expecting one tablename string , an array of tablesnames and or x²sql-objects. 
	 * 
	 * @note subqueries must provide an alias!
	 * @param $set mixed
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function from($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		$cfg = new stdClass;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$this->command.= $this->last_append = " " . __FUNCTION__ . " " . $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * for details see method 'from'
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function update($set) {
		$this->current_call = __FUNCTION__;
		$this->command_type = __FUNCTION__;
		$cfg = new stdClass;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$this->command.= $this->last_append = __FUNCTION__ . " " . $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * for details see method 'from'
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function delete($set) {
		$this->current_call = __FUNCTION__;
		$this->command_type = __FUNCTION__;
		$cfg = new stdClass;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$this->command.= $this->last_append = __FUNCTION__ . " from " . $this->complode($set, $cfg);
		return $this;
	}

	///tablelist-group
	//conditio-group
	/**
	 * 
	 * The where-filter can be a deep nested array, with three to five fields.
	 * Normally 3 fields are used to get a operand operator operand construct.
	 * <code>
	 * array("three","<>",3);
	 * </code>
	 * the "between" operation accepts 5 fields:
	 * <code>
	 * array(23,"between",8,"and",400);
	 * </code>
	 * The default handling is string escape if not a recognized operator.
	 * Use the HelperClasses to force a specific type: x²bool,x²number,x²keyword,x²func.
	 * And supqueries are supported , of course.
	 * <code>
	 * x²sql::query()->select()->from("table")->where(array(
	 *     x²sql::query()->select("id")->from("table")->where(array("name","=","herbert")),
	 *     "=",234 
	 *     ))->command;
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function where($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		if (!is_array($set) && !is_object($set)) {
			$set = array($set);
		}
		$cfg = new stdClass;
		$cfg->delimiter = " ";
		$cfg->no_alias = true;
		$this->command.= $this->last_append = " " . __FUNCTION__ . " " . $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * for details look at method: where.
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function having($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		if (!is_array($set) && !is_object($set)) {
			$set = array($set);
		}
		$cfg = new stdClass;
		$cfg->delimiter = " ";
		$cfg->no_alias = true;
		$this->command.= $this->last_append = " " . __FUNCTION__ . " " . $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * for details see method: select
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function group($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		if (!is_array($set) && !is_object($set)) {
			$set = array($set);
		}
		$cfg = new stdClass;
		$cfg->no_alias = true;
		$cfg->no_brackets = true;
		$cfg->cast = self::x²key;
		$this->command.= $this->last_append = " " . __FUNCTION__ . " by " . $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * for details see method: select
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function order($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		if (!is_array($set) && !is_object($set)) {
			$set = array($set);
		}
		$cfg = new stdClass;
		$cfg->no_alias = true;
		$cfg->no_brackets = true;
		$cfg->allow = array(self::x²key, self::x²order, self::x²string, self::x²number, self::x²token);
		$cfg->cast = self::x²order;
		$this->command.= $this->last_append = " " . __FUNCTION__ . " by " . $this->complode($set, $cfg);
		return $this;
	}

	///conditio-group
	// integer-group

	/**
	 * 
	 * restricts the amount a recordsets
	 *
	 * @param $set int
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function limit($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		if (is_a($set, "x²number")) {
			$set = $set->value;
		}
		if (is_string($set) && substr($set, 0, 1) == self::tokenizer || $set == self::placerholder) {
			$this->command.= $this->last_append =
					" " . __FUNCTION__ . " " . $this->complode($set);
			return $this;
		}
		if (is_numeric($set)) {
			$this->command.= $this->last_append =
					" " . __FUNCTION__ . " " . $this->complode(round($set));
			return $this;
		}		
		throw new Exception(__CLASS__ . "->limit: $set  is not a number");
	}

	/**
	 * 
	 * Sets the start position of recordset return
	 *
	 * @param $set int
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function offset($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		if (is_a($set, "x²number")) {
			$set = $set->value;
		}
		if (is_string($set) && substr($set, 0, 1) == self::tokenizer || $set == self::placerholder) {
			$this->command.= $this->last_append =
					" " . __FUNCTION__ . " " . $this->complode($set);
			return $this;
		}
		if (is_numeric($set)) {
			$this->command.= $this->last_append =
					" " . __FUNCTION__ . " " . $this->complode(round($set));
			return $this;
		}
		$set*=1;
		throw new Exception(__CLASS__ . "->offset: var is not a number");
	}

	///integer-group

	/**
	 * 
	 * for details see method 'select'
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function columns($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		if (!is_array($set)) {
			$set = array($set);
		}
		$cfg = new stdClass();
		$cfg->escape = self::esc_key;
		$cfg->allow = array(self::x²key, self::x²string, self::x²place, self::x²token);
		$cfg->no_alias = true;
		$this->command.= $this->last_append = $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * Default escaping is string Escape, use Placeholder or Token to have better control.
	 * At this time the x²-helpers are not supported.
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function values($set) {
		$this->current_call = __FUNCTION__;
		if (!is_array($set)) {
			$set = array($set);
		}
		$cfg = new stdClass();
		$cfg->no_alias = true;
		$this->command.= $this->last_append = " values" . $this->complode($set, $cfg);
		return $this;
	}

	/**
	 * 
	 * Assoc array or stdClass.
	 * Key ist Columnname and Field is value forthe Column.
	 * x²-HelperClasses are not supported.
	 * 
	 * @param $set
	 * @param $options
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function set($set, $options = null) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		
		if($this->flag){
			$this->command_type = __FUNCTION__;
			$this->command = __FUNCTION__ . " ";		
		}
		else{
			$this->command.=" " . __FUNCTION__ . " ";
		}
		
			if (!is_array($set) && !is_object($set)) 
				throw new Exception("set input must be iteratable array or object");
			
			$cfg = new stdClass;
			$cfg->no_alias = true;
			$tmp = array();

		if($this->flag){
			foreach ($set as $key => $val) {
				$tmp[$key] = preg_replace('/[^a-z0-9_@$]/i', '', $key);
				$tmp[$key].= "=";
				$tmp[$key].= "(".$this->complode($val, $cfg).")";
				}		
		}
		else{
			foreach ($set as $key => $val) {
				$tmp[$key] = self::escape($key, self::esc_key);
				$tmp[$key].= "=";
				$tmp[$key].= $this->complode($val, $cfg);
				}
		}

		
		$this->command.= $this->last_append = implode(self::char_list_delimiter, $tmp) . " ";
		return $this;
	}

	/**
	 * 
	 * Additional information for the Statement
	 *
	 * @param $name
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function union($set) {
		$this->current_call = __FUNCTION__;
		if ($set === null)
			return $this;
		$cfg = new stdClass();
		$cfg->delimiter = " union ";
		$cfg->no_alias = true;
		$cfg->no_brackets = true;
		$this->command.= $this->last_append = " union " . $this->complode($set, $cfg);
		return $this;
	}
	/**
	 * 
	 * transaction
	 *
	 * @param $set
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function transaction($set){
		if(!is_array($set))return $this;
	  $this->command_type = __FUNCTION__;
		$this->command = array();
		foreach ($set as $key =>  $statement){
			$x²sql = new x²sql($statement);
			if($x²sql->prepare){
				$this->prepare = true;
				$this->bind->$key = $x²sql->bind;
			}
			$this->command[]= $this->last_append = $x²sql->command.";";
		}

		return $this;
	}	
	/**
	 * 
	 * The PDO fetch-method as string
	 *
	 * @param $fetch
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function fetch($fetch) {
		$this->current_call = __FUNCTION__;
		if ($fetch)
			$this->fetch = $fetch;
		return $this;
	}

	/**
	 * 
	 * The Pdo fetchtype eg: PDO::FETCH_NUM
	 *
	 * @param $type int
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function fetch_type($type) {
		$this->current_call = __FUNCTION__;
		if ($type)
			$this->fetch_type = $type;
		return $this;
	}

	/**
	 * 
	 * the table alias in subqueries
	 *
	 * @param $alias
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function alias($alias) {
		$this->current_call = __FUNCTION__;
		$this->alias = $alias;
		return $this;
	}

	/**
	 * 
	 * the name for the queries. To give a query-manager something to work with. 
	 *
	 * @param $name
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function name($name) {
		$this->current_call = __FUNCTION__;
		$this->name = $name;
		return $this;
	}

	/**
	 * 
	 * Additional information for the Statement
	 *
	 * @param $name
	 *
	 * @return x²sql $this
	 *
	 * @access public
	 */
	public function comment($text) {
		$this->current_call = __FUNCTION__;
		$this->name = $text;
		return $this;
	}
	


}
/**
 * 
 * Helper Class, to generate function statements.
 * x²func maybe deep-nested, of course.
 *
 * @package x²sql
 * @since
 */
class x²func {

	public $name;
	public $alias;
	public $argus;
	public $text;

	/**
	 * 
	 */
	public function __construct($name, $argus = null, $alias = "") {
		if (preg_match("/\s|\n|\r|\t/", $name))
			throw new Exception(__CLASS__ . "->name must not have spaces");
		$this->name = $name;
		if (preg_match("/\s|\n|\r|\t/", $alias))
			throw new Exception(__CLASS__ . "->alias must not have spaces");
		$this->alias = $alias;

		if (is_bool($argus) || is_numeric($argus) || is_string($argus) || is_object($argus)) {
			$this->argus = array($argus);
		} else if ($argus === null)
			$this->argus = array();
		else
			$this->argus = $argus;
	}

}
/**
 * 
 * Avoid string escaping and mark the statement to be prepared
 *
 * @package x²sql
 * @since
 */
class x²base {

	public $value;
	public $alias;
	public $display;
	public $escape = x²sql::esc_string;

	/**
	 * 
	 */
	public function __construct($value, $alias = "") {
		$this->value = $value;
		$this->alias = $alias;
	}

}
/**
 * 
 * Avoid string escaping and mark the statement to be prepared
 *
 * @package x²sql
 * @since
 */
class x²token extends x²base {

	public $escape = x²sql::esc_non;

	/**
	 * 
	 */
	public function __construct($value, $alias = "") {
		if (preg_match("/\s/", $value))
			throw new Exception(__CLASS__ . "->value space is not allowed");
		$value = (substr($value, 0, 1) == x²sql::tokenizer) ? substr($value, 1) : $value;
		parent::__construct($value, $alias);
		$this->display = x²sql::tokenizer . x²sql::escape($value, x²sql::esc_non)
				. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
		;
	}

}
/**
 * 
 * for completeness
 *
 * @package x²sql
 * @since
 */
class x²string extends x²base {

	/**
	 * 
	 */
	public function __construct($value, $alias = "") {
		parent::__construct($value, $alias);
		$this->display = x²sql::escape($value, x²sql::esc_string)
				. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
	}

}
/**
 * 
 * force database-keyword escaping: columns, tablenames, databasename.
 *
 * @package x²sql
 * @since
 */
class x²key extends x²base {

	public $escape = x²sql::esc_key;

	/**
	 * 
	 */
	public function __construct($value, $alias = "") {
		
		parent::__construct($value, $alias);
		
		if(is_array($value)){
			foreach($value as $i => $_){
				if( !(is_object($_) && $_->type == x²sql::x²operator && $_->value =="*"))
				$value[$i]=x²sql::escape($_, x²sql::esc_key);
				else $value[$i] = "*";
				}
			$value   = implode(".",$value);
			$this->display = $value. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
			}
		else{			

			$this->display = x²sql::escape($value, x²sql::esc_key)
				. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
		}
		
		if (preg_match("/\s/", $value))
			throw new Exception(__CLASS__ . "->value space is not allowed");

	}

}
/**
 * 
 * Allow 'true' and 'false' string to be recognized as booleans
 *
 * @package x²sql
 * @since
 */
class x²bool extends x²base {

	public $escape = x²sql::esc_non;

	/**
	 * __construct
	 * Insert description here
	 *
	 * @param $value
	 * @param $alias
	 *
	 * @return
	 *
	 * @access
	 * @static
	 * @see
	 * @since
	 */
	public function __construct($value, $alias = "") {
		if (!is_bool($value) && !preg_match("/true|false|1|0/i", $value)) // localized ...
			throw new Exception(__CLASS__ . "->value is no boolean");
		parent::__construct($value, $alias);
		$this->display = ($value ? "1" : "0")
				. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
	}

}
/**
 * 
 * skip string escaping, if it is a valid number of course.
 *
 * @package x²sql
 * @since
 */
class x²number extends x²base {

	public $escape = x²sql::esc_non;

	/**
	 * __construct
	 * Insert description here
	 *
	 * @param $value
	 * @param $alias
	 *
	 * @return
	 *
	 * @access
	 * @static
	 * @see
	 * @since
	 */
	public function __construct($value, $alias = "") {
		if (!is_numeric($value))
			throw new Exception(__CLASS__ . "->value is no number");
		parent::__construct($value, $alias);
		$this->display = x²sql::escape($value, x²sql::esc_non)
				. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
		;
	}

}
/**
 * 
 * Allow string 'null' to be handled as PHP/DB null.
 *
 * @package x²sql
 * @since
 */
class x²null extends x²base {

	public $escape = x²sql::esc_non;

	/**
	 * __construct
	 * Insert description here
	 *
	 * @access
	 * @static
	 * @see
	 * @since
	 */
	public function __construct($value = null, $alias = "") {
		if ($value !== null && $value !== x²sql::null_string)
			throw new Exception(__CLASS__ . "->value is no valid null");
		parent::__construct($value, $alias);
		$this->display = x²sql::null_string
				. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
	}

}
/**
 * 
 * Allow string 'null' to be handled as PHP/DB null.
 *
 * @package x²sql
 * @since
 */
class x²place extends x²base {

	public $escape = x²sql::esc_non;

	/**
	 * Insert description here
	 *
	 * @access
	 * @static
	 * @see
	 * @since
	 */
	public function __construct($value = null, $alias = "") {
		parent::__construct(x²sql::placerholder, $alias);
		$this->display = x²sql::placerholder
				. ($this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
	}

}

class x²order extends x²base {

	public function __construct($value, $direction = "") {
		if ("asc" != strtolower($direction) && "desc" != strtolower($direction) && $direction !== "")
			throw new Exception(__CLASS__ . "->direction must be 'asc' 'desc' or emptyString");
		parent::__construct($value, $direction);
		$this->display = x²sql::escape($value, x²sql::esc_key)
				. ($this->alias ? " " . $this->alias : "");
	}

}

class x²operator extends x²base {

	public $value;

	public function __construct($operator) {
		if (!preg_match(x²sql::regex_operators, $operator))
			throw new Exception(__CLASS__ . " no valid operator");
		$this->value = $operator;
		$this->display = $operator;
	}

}

class x²math extends x²base {
	const regex_math = "/(:=|\|\||OR|XOR|&&|AND|NOT|BETWEEN|CASE|WHEN|THEN|ELSE|=|<=>|>=|<=|<|<>|>|!=|IS|LIKE|REGEXP|IN|\||&|<<|>>|-|\+|\*|\/|DIV|%|MOD|^|~|!|BINARY|COLLATE)/i";
	public $value;

	public function __construct($math) {
		if(preg_match("/[^\s0-9\.\*+-\/=<>!&%~\(\)]/",$math))
			throw new Exception(__CLASS__ . " no valid math expression");
		$this->value = str_replace(array(" ","\n","\r","\t"),"",$math);
		$this->display = $math;
	}

}

?>

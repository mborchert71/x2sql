<?php

/**
 * x²sql
 *
 * An open source SQL-generator-class.
 * Inspired by the database-driver in Code-igniter http://ellislab.com/codeigniter.
 *   if (get_magic_quotes_gpc()) {        $value = stripslashes($value);    }
 * 
 * x²func redo ... text to display .. funcname to x²key alias to x²key
 * 2 ways . 1.standalone strictmode . every argument explicit or string escaped if not number
 *          2.relaxed mode lazy ... oder in  den x²s die ganzen kreuzauflösungen schon vornehmen ...
 *  dürfte auch complode um einiges schlanker machen ...  oh man seit ? monaten ... langsam hängt mir das wider trotz pausen zum hals raus ...
 *  ja ich weiss immer geschoben .. func war zuerst und dann x²base und nicht angepasst ... weil noch so viel zu tun war, was wichtiger war...
 *  immer wieder die selben fallen ... oder hindernisse...
 * 
 * @package		x²sql
 * @author		mborchert
 * @copyright           Copyright (c) 2013.
 * @license		http://creativecommons.org/licenses/by/3.0/deed.de
 * @link		http://get-resource.net/app/php/x²sql
 * @since		Version 1.0
 * @todo: join
 * @todo: support special settings : distinct, etc.
 * @todo: config_setting_options for complode : delimiter,no_brackets,no_alias,cast,escape,allow,array_position
 */
class x²sql {
	//outsource:

	const version = 0.8;
	const x²classlist = ",x²sql,x²sql,x²null,x²bool,x²number,x²string,x²func,x²token,x²place,x²key,x²order,x²operator,x²math,";
	const x²sql = "x²sql";
	const x²null = "x²null";
	const x²bool = "x²bool";
	const x²number = "x²number";
	const x²string = "x²string";
	const x²func = "x²func";
	const x²token = "x²token";
	const x²place = "x²place";
	const x²key = "x²key";
	const x²order = "x²order";
	const x²operator = "x²operator";
	const x²math = "x²math";
	const delimiter = ",";
	const bracket_open = "(";
	const bracket_close = ")";
	const tokenizer = ":";
	const placeholder = "?";
	const esc_string = "'";
	const esc_key = "`";
	const esc_non = "";
	const esc_num = "";
	const null_string = "null";
	//
	const transaction = "transaction";
	const select = "select";
	const show = "show";
	const insert = "insert";
	const delete = "delete";
	const update = "update";
	const create = "create";
	const set = "set";

	//const grant="grant";
	//const alter = "alter";

	public $tokenizer = ":";
	public $placeholder = "?";
	public $esc_string = "'";
	public $esc_key = "`";
	public $esc_non = "";
	public $esc_num = "";
	public $null_string = "null";
	public $x²sql = "x²sql";
	public $x²null = "x²null";
	public $x²bool = "x²bool";
	public $x²number = "x²number";
	public $x²string = "x²string";
	public $x²func = "x²func";
	public $x²token = "x²token";
	public $x²place = "x²place";
	public $x²key = "x²key";
	public $x²order = "x²order";
	public $x²operator = "x²operator";
	public $x²math = "x²math";
	public $delimiter = ",";
	public $bracket_open = "(";
	public $bracket_close = ")";
	///outsource

	private $flag;
	public $__name;
	public $comment;
	public $command;
	public $command_type;
	public $fetch = "fetchAll";
	public $fetch_type = PDO::FETCH_NUM;
	public $init_data;
	public $last_append;
	public $disallow_create = [];
	public $last_word;
	public $prepare = false;
	public $bind;
	public $bind_count = 0;

	const token_function_list = ",command,select,from,union,where,group,having,order,limit,offset,fetch,fetch_type,alias,insert,columns,values,update,delete,where,transaction,set,__name,comment,create,options,name,plock,";

	public function __toString() {
		return (is_array($this->command)) ? implode("\n", $this->command) : $this->command;
	}

	public function reset() {
		$this->bind = new stdClass();
		$this->bind_count = 0;
		$this->prepare = false;
		$this->init_data = null;
		$this->command = "";
		$this->command_type = null;
		$this->last_append = "";
		$this->fetch = "fetchAll";
		$this->fetch_type = PDO::FETCH_NUM;
		$this->comment = "";
		$this->__name = "";
	}

	public function get_cfg_data(&$cfg) {

		if (is_string($cfg) && preg_match("/^[\{\(]+/", $cfg)) {
			$jcfg = json_decode($cfg);
			if (!is_array($jcfg) && !is_object($jcfg)) {
				throw new Exception("invalid Json");
			}
			return $jcfg;
		}
		return $cfg;
	}

	public function __construct($cfg = null) {

		$this->bind = new stdClass;
		$this->init_data = $cfg;
		$cfg = $this->get_cfg_data($cfg);

		if ($cfg) {
			if (@$cfg->command) {

				if (is_string($cfg->command)) {
					$_ = explode(" ", $cfg->command);
					$this->command_type = array_shift($_);
					unset($_);
				} else {
					$this->command_type = $cfg->command[0];
					foreach ($cfg->command as &$c) {
						if (is_object($c) || is_array($c))
							$c = self::complode($c);
					}
				}
				$this->command = implode("\n", $cfg->command);
				return $this;
			}
			if (property_exists($cfg, x²sql::select))
				return $this->__name(@$cfg->__name)
												->comment(@$cfg->comment)
												->select($cfg->select)
												->from(@$cfg->from)
												->union(@$cfg->union)
												->where(@$cfg->where)
												->group(@$cfg->group)
												->having(@$cfg->having)
												->order(@$cfg->order)
												->limit(@$cfg->limit)
												->offset(@$cfg->offset)
												->fetch(@$cfg->fetch)
												->fetch_type(@$cfg->fetch_type)
												->alias(@$cfg->alias, $cfg);
			if (property_exists($cfg, x²sql::insert))
				return $this->__name(@$cfg->__name)
												->comment(@$cfg->comment)
												->insert($cfg->insert)
												->columns($cfg->columns)
												->values($cfg->values);
			if (property_exists($cfg, x²sql::update))
				return $this->__name(@$cfg->__name)
												->comment(@$cfg->comment)
												->update($cfg->update)
												->set($cfg->set)
												->where($cfg->where);
			if (property_exists($cfg, x²sql::delete))
				return $this->__name(@$cfg->__name)
												->comment(@$cfg->comment)
												->delete($cfg->delete)
												->where($cfg->where);
			if (property_exists($cfg, x²sql::transaction))
				return $this->__name(@$cfg->__name)
												->comment(@$cfg->comment)
												->transaction($cfg->transaction);
			if (property_exists($cfg, x²sql::set))
				return $this->__name(@$cfg->__name)
												->comment(@$cfg->comment)
												->flag("command")
												->set($cfg->set)
												->unflag();
			if (property_exists($cfg, x²sql::create))
				return $this->__name(@$cfg->__name)
												->comment(@$cfg->comment)
												->create($cfg->create)
												->options(@$cfg->options)
												->name($cfg->name)
												->plock($cfg);
		}
	}

	public function flag($hint) {
		$this->flag = $hint;
		return $this;
	}

	public function unflag() {
		$this->flag = null;
		return $this;
	}

	static public function query($cfg = null) {
		return new x²sql($cfg);
	}

	static public function _scalar(&$set, &$cfg) {
		if (is_bool($set)) {
			$set = $set ? "1" : "0";
			$class = @$cfg->cast ? $cfg->cast : self::x²bool;
			return self::complode(new $class($set), $cfg);
		} elseif (is_numeric($set)) {
			$class = @$cfg->cast ? $cfg->cast : self::x²number;
			return self::complode(new $class($set), $cfg);
		} elseif (is_string($set)) {
			if (@$cfg->word == "select" && $set == "*")
				return "*";
			if (@$cfg->word == "where" || @$cfg->word == "having")
				if (preg_match(x²operator::regex, $set) && (@$cfg->array_position & 1))
					return $set;
			if ($set == self::placeholder) {
				return self::complode(new x²place($set), $cfg);
			} elseif (substr($set, 0, 1) == self::tokenizer) {
				return self::complode(new x²token(substr($set, 1)), $cfg);
			} else {
				$class = @$cfg->cast ? $cfg->cast : self::x²string;
				return self::complode(new $class($set), $cfg);
			}
		} throw new Exception("you should never reach this point");
	}

	static public function _stdclass(&$set, &$cfg) {
		switch (@$set->type) {
			case self::x²null:
			case self::x²bool :
			case self::x²number :
			case self::x²place :
			case self::x²token :
			case self::x²string :
			case self::x²key :
				$class = $set->type;
				return self::complode(new $class($set->value, @$set->alias), $cfg);
				break;
			case self::x²func :
				return self::complode(new x²func($set->value, @$set->alias, @$set->argus), $cfg);
				break;
			case __CLASS__:
				return self::complode(new x²sql($set), $cfg);
				break;
			case self::x²order:
				return self::complode(new x²order($set->value, @$set->direction), $cfg);
				break;
			case self::x²operator:
				return self::complode(new x²operator($set->value), $cfg);
				break;
			case self::x²math:
				return self::complode(new x²math($set->value), $cfg);
				break;
			default:
				throw new Exception(__CLASS__ . "->implode unkown type: " . print_r($set, true));
				break;
		}
	}

	static public function _xobject(&$set, &$cfg) {

		$class = get_class($set);
		if (isset($cfg->allow) && !in_array($class, $cfg->allow) && !method_exists($class, "__toString")) {
			if ($class != "stdClass")
				throw new Exception("$class is not allowed");
		}
		switch ($class) { //$this->stringify_$class($set,$cfg); polymorphism no switch.
			case self::x²place:
			case self::x²token:
				if (!is_a(@$cfg->x²instance, "x²sql")) {
					throw new Exception("binding is only supported on instantiated object");
				}
				$cfg->x²instance->prepare = true;
				$counter = $cfg->x²instance->bind_count++;
				$cfg->x²instance->bind->$counter = new stdClass();
				$cfg->x²instance->bind->$counter->bind = "Param";
				$cfg->x²instance->bind->$counter->key = $class == self::x²token ? $set->value : self::placeholder;
				$cfg->x²instance->bind->$counter->type = PDO::PARAM_STR;
				$cfg->x²instance->bind->$counter->value = self::null_string;
				if (@$cfg->no_alias) {
					return $class == self::x²token ? self::escape(self::tokenizer . $set->value, "") : self::escape($set->value, "");
				}
				else
					return $set->display;
				break;
			case self::x²string : if (!@$set->value) {
					return self::esc_string . self::esc_string;
				}//no break;
			case self::x²null:
			case self::x²bool :
			case self::x²number :
			case self::x²key : //return_by_cfg
				if (@$cfg->escape && $cfg->escape != $set->escape) {
					return self::escape($set->value, $cfg->escape)
									. (@$cfg->no_alias ? "" : " " . self::escape($set->alias, self::esc_key) );
				} elseif (@$cfg->no_alias) {
					if (isset($set->display_no_alias))
						return $set->display_no_alias;
					return (new $class($set->value))->display;
				} else {
					return $set->display;
				}
				break;
			case self::x²order:
			case self::x²operator: return $set->display;
				break;
			case self::x²math:
			case self::x²func: return @$cfg->no_alias ? $set->display_no_alias : $set->display;
				break;
			case __CLASS__: //addbondage
				if (@$set->prepare) {
					if (!is_a(@$cfg->x²instance, "x²sql")) {
						throw new Exception("nested Sql is only supported on instantiated object");
					}
					$cfg->x²instance->prepare = true;
					foreach ($set->bind as $key => $bind) {
						$cfg->x²instance->bind_count+=1;
						$cfg->x²instance->bind->{$cfg->x²instance->bind_count + $set->bind_count} = $bind;
					}
				}
				return $set->command;
			default: //lax __toString
				if (!method_exists($class, "__toString")) {
					throw new Exception(__CLASS__ . "->implode unkown type");
				} else {
					return self::complode($set->__toString(), $cfg);
				}
				break;
		}
	}

	static public function complode($set, $cfg = null) {

		if (!$cfg)
			$cfg = new stdClass;
		if ($set === null) {
			return self::complode(new x²null(), $cfg);
		}
		if (is_array($set)) {
			$delimiter = @$cfg->delimiter ? $cfg->delimiter : self::delimiter;
			$_ = [];
			foreach ($set as $key => $subset) {
				$cfg->array_position = $key;
				$_[] = self::complode($subset, $cfg);
			}
			return ((@$cfg->no_brackets) ? "" : self::bracket_open)
							. implode($delimiter, $_)
							. ((@$cfg->no_brackets) ? "" : self::bracket_close);
		} elseif (is_object($set)) {

			if (is_a($set, "stdClass"))
				return self::_stdclass($set, $cfg);
			else
				return self::_xobject($set, $cfg);
		}
		else
			return self::_scalar($set, $cfg);
	}

	static public function escape($str, $esc = "", $operator = 0) {

		if (is_object($str)) {
			if(@$str->display) return $str->display;
			return x²sql::complode($str, json_decode('{"escape":"' . $esc . '","operator":"' . $operator . '"}'));
		}

		if (is_string($str) && strlen($str) == 0)
			return "";
		if ($str === self::null_string || $str === null) {
			return self::null_string;
		} elseif (is_bool($str))
			return $str ? $esc . "1" . $esc : $esc . "0" . $esc;
		elseif ($str === self::placeholder)
			return $str;
		elseif (is_numeric($str))
			return $esc . $str . $esc;
		elseif (preg_match(x²operator::regex, $str) && $operator)
			return trim($str);
		elseif (substr($str, 0, 1) != self::tokenizer) {

			$ndl = array("/\\r/", "/\\n/", "/\\t/");
			$rep = array("\\r", "\\n", "\\t");

			if (trim($esc)) {
				$ndl= "/" . $esc . "/";
				$rep = ($esc === self::esc_key ? $esc . $esc : "\\" . $esc);
			}
			return $esc . preg_replace($ndl, $rep, $str) . $esc;
		} else {
			if (preg_match("/\s/", trim($str)))
				throw new Exception("tokenizer must have no space");
		}

		return $str;
	}

	public function create($set) {

		$this->command_type = __FUNCTION__;

		if (!preg_match("/;$set;/i", ";" . implode(";", $this->disallow_create) . ";")) {
			throw new Exception("creation prohibited");
		}
		$this->command.= $this->last_word = __FUNCTION__ . " ";
		$this->command.= $this->last_append = " " . $set;
		return $this;
	}

	public function select($set = "*") {

		if ($this->command_type != self::transaction)
			$this->command_type = __FUNCTION__;

		if ($set === "" || $set === null) {
			$set = "*";
		} else {
			$cfg = new stdClass;
			$cfg->x²instance = $this;
			$cfg->word = __FUNCTION__;
			$cfg->no_brackets = true;
			$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
			$set = self::complode($set, $cfg);
		}
		$this->command.= $this->last_word = __FUNCTION__;
		$this->command.= $this->last_append = " " . $set;
		return $this;
	}

	public function insert($set) {

		if ($this->command_type != self::transaction)
			$this->command_type = __FUNCTION__;

		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$this->command.= $this->last_word = __FUNCTION__ . " into";
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function update($set) {

		if ($this->command_type != self::transaction)
			$this->command_type = __FUNCTION__;

		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$this->command.= $this->last_word = __FUNCTION__;
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function delete($set) {

		if ($this->command_type != self::transaction)
			$this->command_type = __FUNCTION__;

		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$this->command.= $this->last_word = __FUNCTION__ . " from";
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function from($set) {
		if ($set === null || $set === "")
			return $this;
		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->cast = "x²key";
		$cfg->allow = array(self::x²string, self::x²key, self::x²token, __CLASS__);
		$cfg->no_brackets = true;
		$from = self::complode($set, $cfg);
		if ($from == "" || $from == null)
			throw new exception("could not evaluate from " . print_r($from, true));
		$this->command.= $this->last_word = " " . __FUNCTION__;
		$this->command.= $this->last_append = " " . $from;
		return $this;
	}

	public function filter($set, $dropword = false) {
		$cmd = $this->last_word;
		if ($set === null)
			return $this;
		if (!is_array($set) && !is_object($set)) {
			$set = array($set);
		}
		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->word = $cmd;
		$cfg->delimiter = " ";
		$cfg->no_alias = true;
		$this->command.= ($dropword ? "" : " " . $cmd);
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function where($set, $dropword = false) {
		$this->last_word = __FUNCTION__;
		return $this->filter($set, $dropword);
	}

	public function having($set, $dropword = false) {
		$this->last_word = __FUNCTION__;
		return $this->filter($set, $dropword);
	}

	public function group($set) {
		if ($set === null)
			return $this;
		if (!is_array($set) && !is_object($set)) {// ? obsolete
			$set = array($set);
		}
		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->no_alias = true;
		$cfg->no_brackets = true;
		$cfg->cast = self::x²key;
		$this->command.= $this->last_word = " " . __FUNCTION__ . " by";
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function order($set) {
		if ($set === null)
			return $this;
		if (!is_array($set) && !is_object($set)) {// ? obsolete
			$set = array($set);
		}
		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->no_alias = true;
		$cfg->no_brackets = true;
		$cfg->allow = array(self::x²key, self::x²order, self::x²string, self::x²number, self::x²token);
		$cfg->cast = self::x²order;
		$this->command.= $this->last_word = " " . __FUNCTION__ . " by";
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function _integer($set) {

		if ($set === null)
			return $this;
		if (is_a($set, "x²number") || is_a($set, "x²string")) {
			$set = $set->value;
		} elseif (is_numeric($set)) {
			$set = intval($set);
		}
		$cfg = new stdClass();
		$cfg->x²instance = $this;
		$cfg->cast = "x²number";
		$this->command.= " " . $this->last_word;
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function limit($set) {
		$this->last_word = __FUNCTION__;
		return $this->_integer($set);
	}

	public function offset($set) {
		$this->last_word = __FUNCTION__;
		return $this->_integer($set);
	}

	public function columns($set) {

		if ($set === null)
			return $this;
		if (!is_array($set)) {
			$set = array($set);
		}
		$cfg = new stdClass();
		$cfg->x²instance = $this;
		$cfg->escape = self::esc_key;
		$cfg->allow = array(self::x²key, self::x²string, self::x²place, self::x²token);
		$cfg->no_alias = true;
		$this->command.= $this->last_word = " ";
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function values($set) {
		$this->last_word = __FUNCTION__;
		if (!is_array($set)) {
			$set = array($set);
		}
		$cfg = new stdClass();
		$cfg->x²instance = $this;
		$cfg->no_alias = true;
		$this->command.= $this->last_word = " values";
		$this->command.= $this->last_append = self::complode($set, $cfg);
		return $this;
	}

	public function set($set, $options = null) {
		$this->last_word = __FUNCTION__;
		if ($set === null)
			return $this;

		if ($this->flag) {
			$this->command_type = __FUNCTION__;
			$this->command = __FUNCTION__ . " ";
		} else {
			$this->command.=" " . __FUNCTION__ . " ";
		}

		if (!is_array($set) && !is_object($set))
			throw new Exception("set input must be iteratable array or object");

		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->no_alias = true;
		$tmp = array();

		if ($this->flag) {
			foreach ($set as $key => $val) {
				$tmp[$key] = preg_replace('/[^a-z0-9_@$]/i', '', $key);
				$tmp[$key].= "=";
				$tmp[$key].= "(" . self::complode($val, $cfg) . ")";
			}
		} else {
			foreach ($set as $key => $val) {
				$tmp[$key] = self::escape($key, self::esc_key);
				$tmp[$key].= "=";
				$tmp[$key].= self::complode($val, $cfg);
			}
		}

		$this->command.= $this->last_append = " " . implode(self::delimiter, $tmp);
		return $this;
	}

	public function union($set) {
		if ($set === null)
			return $this;
		$cfg = new stdClass();
		$cfg->x²instance = $this;
		$cfg->delimiter = " union ";
		$cfg->no_alias = true;
		$cfg->no_brackets = true;
		$this->command.= $this->last_word = " union ";
		$this->command.= $this->last_append = self::complode($set, $cfg);
		return $this;
	}

	public function transaction($set) {
		if (!is_array($set))
			return $this; //throw exception;
		$this->command_type = __FUNCTION__;
		$this->command = array();
		foreach ($set as $key => $statement) {
			$x²sql = new x²sql($statement);
			if ($this->prepare) {
				$this->prepare = true;
				$this->bind->$key = $x²sql::$bind;
			}
			$this->command[] = $this->last_append = $x²sql->command . ";";
		}

		return $this;
	}

	public function fetch($fetch) {
		$this->last_word = __FUNCTION__;
		if ($fetch)
			$this->fetch = $fetch;
		return $this;
	}

	public function fetch_type($type) {
		$this->last_word = __FUNCTION__;
		if ($type)
			$this->fetch_type = $type;
		return $this;
	}

	public function alias($set, $cfg = null) {
		$alias = @$cfg->no_alias;
		$this->last_word = __FUNCTION__;
		if ($set === null || $set == self::null_string || $set === "")
			return $this;

		$o = self::bracket_open;
		$c = self::bracket_close;

		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->cast = self::x²key;
		$cfg->no_brackets = true;
		$this->command = $this->last_append = $o . $this->command . $c . ($alias ? "" : " " . self::complode($set, $cfg));

		return $this;
	}

	public function options($set) {
		$this->last_word = __FUNCTION__;
		$this->command.= $this->last_append = ""; // not supported yet
		return $this;
	}

	public function plock(&$set) {
		$this->last_word = __FUNCTION__;
		$create_pl_block = x²plock::{$set->create}($set);
		foreach ($create_pl_block->bind as $key => $obj) {
			$this->bind->{$key} = $obj;
		}
		$this->command.= $this->last_append = " " . $create_pl_block->command;
		return $this;
	}

	public function name($set) {
		$this->last_word = __FUNCTION__;
		$cfg = new stdClass;
		$cfg->x²instance = $this;
		$cfg->no_brackets = true;
		$cfg->no_alias = true;
		$cfg->cast = "x²key";
		$this->command.= $this->last_append = " " . self::complode($set, $cfg);
		return $this;
	}

	public function comment($text) {
		$this->last_word = __FUNCTION__;
		$this->name = $text;
		return $this;
	}

	public function __name($__name) {
		$this->last_word = __FUNCTION__;
		$this->__name = $__name;
		return $this;
	}

}

class x²plock {

	public static function view(&$cfg) {
		//create :view :name :as (self:select  :from);
		if (!isset($cfg->as))
			throw new Exception("x²plock::view has no create 'as' param");
		$as = $cfg->as;
		$as->type = self::x²sql;
		$sql = new x²sql($as);
		$sql->command = "as  " . $sql->command;
		return $sql;
	}

}

class x²base {

	public $value;
	public $alias;
	public $display;
	public $escape = x²sql::esc_string;

	public function __construct($value, $alias = "") {
		$this->value = $value;
		$this->alias = $alias;
	}

	public function __toString() {
		return $this->display;
	}

}

class x²func extends x²base { //x²f

	public $argus;

	public function __construct($value, $alias = "", $argus = "") {

		if (preg_match("/\s|\n|\r|\t/", $value))
			throw new Exception(__CLASS__ . "->name must not have spaces");
		$this->value = $value;
		if (preg_match("/\s|\n|\r|\t/", $alias))
			throw new Exception(__CLASS__ . "->alias must not have spaces");
		$this->alias = $alias;

		if (!is_array($argus)) {
			$this->argus = array($argus);
		} else {
			$this->argus = $argus;
		}

		$this->argus = x²sql::complode($this->argus);

		if ($this->argus === "(null)" || $this->argus === "('')")
			$this->argus = "()";

		$this->alias = $alias ? " " . (new x²key($alias)) : "";
		$this->display_no_alias = $value . $this->argus;
		$this->display = $value . $this->argus . $this->alias;
	}

}

class x²token extends x²base { //x²t

	public $escape = x²sql::esc_non;
	public $name;

	public function __construct($value, $alias = "") {//cfg
		//datatype, required, bind , default    AFTER  handlerMonster is lysed.
		//base to embed cqn into ²sql.
		if (!strlen($value))
			throw new Exception(__CLASS__ . "->emptyToken not allowed");
		if (preg_match("/\s|\n|\r|\t/", $value))
			throw new Exception(__CLASS__ . "->value space is not allowed");

		$value = (substr($value, 0, 1) == x²sql::tokenizer) ? substr($value, 1) : $value;

		$this->name = $value;

		parent::__construct($value, $alias);

		$this->display = x²sql::tokenizer . x²sql::escape($value, x²sql::esc_non)
						. (strlen($this->alias) ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
		;
	}

}

class x²string extends x²base { //x²s

	public function __construct($value, $alias = "") {
		parent::__construct($value, $alias);
		$this->display = x²sql::escape($value, x²sql::esc_string)
						. (@$this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
	}

}

class x²key extends x²base { //x²k

	public $escape = x²sql::esc_key;

	public function __construct($value, $alias = "") {

		parent::__construct($value, $alias);

		$display = [];

		if (is_array($value)) {

			foreach ($value as $i => &$_) {
				if ($_ != "*") {
					if (preg_match("/\s|\n|\r|\t/", $_))
						throw new Exception(__CLASS__ . "->value space is not allowed");
					$display[] = x²sql::escape($_, x²sql::esc_key);
				}
				else
					$display[] = "*";
			}
			$value = implode(".", $display);

			$this->alias = @$this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "";
			$this->display_no_alias = $value;
			$this->display = $this->display_no_alias . $this->alias;
		}
		else if ($value == null) {
			$this->display = "";
		} else {
			$value = trim($value);
			$m = null;
			if (preg_match_all("/\s|\n|\r|\t/", $value, $m)) {
				throw new Exception(__CLASS__ . "->value space is not allowed");
			}

			$this->alias = @$this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "";
			$this->display_no_alias = x²sql::escape($value, x²sql::esc_key);
			$this->display = $this->display_no_alias . $this->alias;
		}
	}

}

class x²bool extends x²base { //x²b

	public $escape = x²sql::esc_non;

	public function __construct($value, $alias = "") {
		if (!is_bool($value) && !preg_match("/true|false|1|0/i", $value)) // localized ...
			throw new Exception(__CLASS__ . "->value is no boolean");
		parent::__construct($value, $alias);

		$this->alias = @$this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "";
		$this->display_no_alias = $value;
		$this->display = $this->display_no_alias . $this->alias;
	}

}

class x²number extends x²base { //x²n

	public $escape = x²sql::esc_non;

	public function __construct($value, $alias = "") {
		$chr = substr($value, 0, 1);
		if (!is_numeric($value) && $chr !== x²sql::tokenizer && $chr !== x²sql::placeholder)
			throw new Exception(__CLASS__ . "->value is no number");
		parent::__construct($value, $alias);

		$this->alias = @$this->alias ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "";
		$this->display_no_alias = $value;
		$this->display = $this->display_no_alias . $this->alias;
	}

}

class x²null extends x²base { //x²z

	public $escape = x²sql::esc_non;

	public function __construct($value = null, $alias = "") {
		if ($value !== null && $value !== x²sql::null_string)
			throw new Exception(__CLASS__ . "->value is no valid null");
		parent::__construct($value, $alias);
		$this->display = x²sql::null_string
						. (strlen($this->alias) ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
	}

}

class x²place extends x²base { //x²p

	public $escape = x²sql::esc_non;

	public function __construct($value = null, $alias = "") {
		parent::__construct(x²sql::placeholder, $alias);
		$this->display = x²sql::placeholder
						. (strlen($this->alias) ? " " . x²sql::escape($this->alias, x²sql::esc_key) : "");
	}

}

class x²order extends x²base { //x²s

	public function __construct($value, $direction = "") {

		if ("asc" != strtolower($direction) && "desc" != strtolower($direction) && $direction !== "")
			$direction = "asc";
		parent::__construct($value, $direction);
		if (is_a($value, x²sql::x²key) || (is_object($value) && isset($value->value))) {
			$this->value = $value->value;
		}
		$this->display = x²sql::escape($this->value, x²sql::esc_key)
						. (strlen($direction) ? " " . $direction : "");
	}

}

class x²operator extends x²base { //x²o

	const regex = "/^(:=|\|\||OR|XOR|&&|AND|NOT|BETWEEN|CASE|WHEN|THEN|ELSE|=|<=>|>=|<=|<|<>|>|!=|IS|LIKE|REGEXP|IN|\||&|<<|>>|-|\+|\*|\/|DIV|%|MOD|^|~|!|BINARY|COLLATE)$/i";

	public function __construct($operator) {

		parent::__construct($operator);

		if (!preg_match(self::regex, $operator))
			throw new Exception(__CLASS__ . " no valid operator");

		$this->escape = "";
		$this->display = $operator;
	}

}

class x²math extends x²base { //x²m

	const regex_math = "/(:=|\|\||OR|XOR|&&|AND|NOT|BETWEEN|CASE|WHEN|THEN|ELSE|=|<=>|>=|<=|<|<>|>|!=|IS|LIKE|REGEXP|IN|\||&|<<|>>|-|\+|\*|\/|DIV|%|MOD|^|~|!|BINARY|COLLATE)/i";

	public $value;

	public function __construct($math) {
		parent::__construct($math);

		$this->display = $this->prepro($math);
	}

	function prepro(&$m) {

		if (is_array($m)) {
			foreach ($m as $k => $_)
				$m[$k] = $this->prepro($_);
			return "(" . implode("", $m) . ")";
		} else if (is_a($m, "x²key"))
			return $m->display; //|| is_a($m,"x²func")todo
		else if (!is_object($m) && preg_match("/[^\s0-9\.\*+-\/=<>!&%~\(\)]/", $m))
			throw new Exception(__CLASS__ . "$m no valid math expression");
		if (!trim($m))
			return "+";
		return $m;
	}

}

/*
 * 
 * last_append aufsplitten: 
 * last_append command
 * last_append value
 * so kann ich hier über last_append den puren wert kriegen ohne das commando-fragment.
 */
?>
